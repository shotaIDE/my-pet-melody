import '../android/fastlane/Fastfile'
import '../ios/fastlane/Fastfile'

require 'google_drive'
require 'yaml'

desc 'Get Flutter dependencies'
lane :install_flutter_dependencies do
  Dir.chdir('../') do
    sh('flutter pub get --no-example')
  end
end

desc 'Generate automatic codes'
lane :generate do
  install_flutter_dependencies

  Dir.chdir('../') do
    sh('dart run build_runner build')
  end
end

desc 'Bump patch version'
lane :bump_patch_version do
  Dir.chdir('../') do
    sh('dart run cider bump patch --bump-build')
  end
end

desc 'Add release candidate tag'
lane :add_release_candidate_tag do
  full_version_name = get_full_version_name

  add_git_tag(
    grouping: 'rc',
    includes_lane: false,
    build_number: full_version_name
  )
end

desc 'Set full version name from latest tag'
lane :set_full_version_name_from_latest_tag do
  latest_tag_name = Dir.chdir('../') do
    sh("git describe --tags --abbrev=0 --match='rc/*'")
  end

  matched = %r{^.*/(\d+\.\d+\.\d+\+\d+)$}.match(latest_tag_name)

  full_version_name = matched[1]

  Dir.chdir('../') do
    sh("dart run cider version #{full_version_name}")
  end
end

desc 'Check if mobile apps are currently released from Google Spreadsheet. '\
  'If not, raise an error.'
lane :check_mobile_apps_are_currently_released do
  Dotenv.load '.env'

  target_spreadsheet_id = ENV['MOBILE_APPS_CURRENTLY_STATUS_SPREADSHEET_ID'].to_s
  sheet_name = ENV['MOBILE_APPS_CURRENTLY_STATUS_SHEET_NAME'].to_s
  target_range = ENV['MOBILE_APPS_CURRENTLY_STATUS_RANGE'].to_s
  released_value = ENV['MOBILE_APPS_CURRENTLY_STATUS_RELEASED_VALUE'].to_s

  service_account_key_json = File.read('spreadsheet-service-account-key.json')
  service_account_key = StringIO.new(service_account_key_json)
  session = GoogleDrive::Session.from_service_account_key(service_account_key)

  spreadsheet = session.spreadsheet_by_key(target_spreadsheet_id)
  sheet = spreadsheet.worksheet_by_title(sheet_name)
  latest_status = sheet[target_range]

  UI.success "Fetched the latest status: #{latest_status}"

  raise 'The latest status is "NOT released".' unless latest_status == released_value

  UI.success 'The latest status is "Released".'
end

desc 'Update mobile apps status to "in release process" on Google Spreadsheet'
lane :update_mobile_apps_status_to_in_release_process do
  Dotenv.load '.env'

  target_spreadsheet_id = ENV['MOBILE_APPS_CURRENTLY_STATUS_SPREADSHEET_ID'].to_s
  sheet_name = ENV['MOBILE_APPS_CURRENTLY_STATUS_SHEET_NAME'].to_s
  target_range = ENV['MOBILE_APPS_CURRENTLY_STATUS_RANGE'].to_s
  in_release_process_value = ENV['MOBILE_APPS_CURRENTLY_STATUS_IN_RELEASE_PROCESS'].to_s

  service_account_key_json = File.read('spreadsheet-service-account-key.json')
  service_account_key = StringIO.new(service_account_key_json)
  session = GoogleDrive::Session.from_service_account_key(service_account_key)

  spreadsheet = session.spreadsheet_by_key(target_spreadsheet_id)
  sheet = spreadsheet.worksheet_by_title(sheet_name)
  sheet[target_range] = in_release_process_value
  sheet.save
end

private_lane :get_full_version_name do
  Dir.chdir('../') do
    sh('dart run cider version').chomp
  end
end

private_lane :get_version_code do
  full_version_name = get_full_version_name

  matched = /^\d+\.\d+\.\d+\+(\d+)$/.match(full_version_name)

  version_code = matched[1].to_i
  version_code
end
